import io.restassured.RestAssured;
import io.restassured.specification.RequestSpecification;
import javax.net.ssl.SSLContext;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.security.cert.*;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;

public class RestAssuredWithCustomSSL {
    public static void main(String[] args) throws Exception {
        String certPath = "path/to/cert.pem";
        String apiUrl = "https://your-secure-api.com/api";

        SSLContext sslContext = createSSLContext(certPath);

        RestAssured.baseURI = apiUrl;
        RequestSpecification request = RestAssured.given()
            .relaxedHTTPSValidation() // Allows self-signed certs
            .header("Content-Type", "application/json")
            .body("{\"key\": \"value\"}") // Replace with actual JSON
            .config(RestAssured.config().sslConfig(
                new io.restassured.config.SSLConfig().sslSocketFactory(
                    new SSLSocketFactory(sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)
                )
            ));

        // Perform POST request
        String response = request.post().then().extract().asString();
        System.out.println("Response: " + response);
    }

    private static SSLContext createSSLContext(String certPath) throws Exception {
        // Load Certificate
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        Certificate cert;
        try (InputStream certInput = Files.newInputStream(Paths.get(certPath))) {
            cert = cf.generateCertificate(certInput);
        }

        // Create TrustStore
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null, null);
        trustStore.setCertificateEntry("custom_cert", cert);

        // Create SSLContext using TrustStore
        return SSLContexts.custom()
                .loadTrustMaterial(trustStore, null)
                .build();
    }
}
