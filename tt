import pandas as pd
import xml.etree.ElementTree as ET
from datetime import datetime

def xml_to_dict(element, parent=""):
    d = {}

    children = list(element)

    # try to detect "label/value" pair in children
    for i, child in enumerate(children):
        key_text = (child.text or "").strip()
        if key_text and key_text.isalpha():  # looks like a label (all letters)
            # check if there's a next sibling -> treat as value
            if i + 1 < len(children):
                value_text = (children[i+1].text or "").strip()
                if value_text:
                    d[key_text] = value_text

    # fallback: normal flattening for all children
    for child in children:
        path = f"{parent}.{child.tag}" if parent else child.tag
        if len(child) > 0:
            d.update(xml_to_dict(child, path))
        else:
            d[path] = (child.text or "").strip()

    return d


def load_xml(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()
    rows = []
    for child in root:
        rows.append(xml_to_dict(child))
    if not rows:  # single root case
        rows = [xml_to_dict(root)]
    return pd.DataFrame(rows)


def compare_xml_xls(xml_file, xls_file, mapper_file, report_file):
    xml_df = load_xml(xml_file)
    xls_df = pd.read_excel(xls_file)
    mapper_df = pd.read_excel(mapper_file)

    report = []
    for _, row in mapper_df.iterrows():
        xml_field = row["xml_field"]
        xls_field = row["xls_field"]

        xml_val = xml_df.get(xml_field, pd.Series([None])).iloc[0]
        xls_val = xls_df.get(xls_field, pd.Series([None])).iloc[0]

        status = "MATCH" if str(xml_val).strip() == str(xls_val).strip() else "MISMATCH"

        report.append({
            "TestName": "XML_vs_XLS",
            "XML Field": xml_field,
            "XML Value": xml_val,
            "XLS Field": xls_field,
            "XLS Value": xls_val,
            "Status": status,
            "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

    report_df = pd.DataFrame(report)
    report_df.to_excel(report_file, index=False)
    print(f"âœ… Report generated: {report_file}")