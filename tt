import io.restassured.RestAssured;
import io.restassured.response.Response;
import javax.net.ssl.*;
import java.security.cert.X509Certificate;
import java.security.NoSuchAlgorithmException;
import java.security.KeyManagementException;
import java.security.NoSuchProviderException;
import java.security.cert.CertificateException;
import java.io.FileInputStream;
import java.io.File;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.Option;

import java.nio.file.Files;
import java.nio.file.Paths;

import static io.restassured.RestAssured.given;

public class RestAssuredSSLTest {
    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchProviderException, KeyManagementException {
        String excelFilePath = "data.xlsx"; // Path to Excel file
        String jsonTemplatePath = "template.json"; // Path to JSON template file
        String apiHost = "https://your-api-host.com"; // API host URL

        // Set system properties for SSL
        // Create a custom TrustManager to accept all certificates
        TrustManager[] trustAllCertificates = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return null; // Accept all certificates
                    }

                    public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                    }
                }
        };

        // Install the all-trusting TrustManager
        SSLContext sc = SSLContext.getInstance("TLS");
        sc.init(null, trustAllCertificates, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        // Step 1: Read the Excel file
        try {
            FileInputStream fis = new FileInputStream(new File(excelFilePath));
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheetAt(0); // Read first sheet
            int totalRows = sheet.getPhysicalNumberOfRows(); // Count rows

            // Step 2: Loop through all rows (excluding the header row)
            for (int i = 1; i < totalRows; i++) { // Start from row 1 (skip header)
                Row row = sheet.getRow(i);
                if (row == null) continue;

                // Read 'fam' value from the current row
                Cell cell = row.getCell(1); // Assuming 'fam' is in column B (index 1)
                String famValue = (cell != null) ? cell.getStringCellValue() : "";

                // Step 3: Read JSON template file
                String jsonContent = new String(Files.readAllBytes(Paths.get(jsonTemplatePath)));

                // Step 4: Parse JSON with error handling
                Configuration config = Configuration.builder().options(Option.DEFAULT_PATH_LEAF_TO_NULL).build();
                DocumentContext jsonContext = JsonPath.using(config).parse(jsonContent);

                // Step 5: Check if 'abc.fam' exists before updating
                if (jsonContext.read("$.abc.fam") != null) {
                    jsonContext.set("$.abc.fam", famValue); // Update 'abc.fam' key
                } else {
                    System.out.println("Error: 'abc.fam' key not found in JSON.");
                    continue; // Skip this request if 'abc.fam' does not exist
                }

                // Step 6: Send POST request for each row
                RestAssured.baseURI = apiHost;

                Response response = given()
                        .relaxedHTTPSValidation() // Ignore SSL verification (for dev/testing)
                        .header("Content-Type", "application/json")
                        .header("cust", "value") // Custom header
                        .body(jsonContext.jsonString()) // Updated JSON body
                        .when()
                        .post("/update")  // API endpoint
                        .then()
                        .statusCode(200)  // Expecting HTTP 200 OK response
                        .extract()
                        .response();

                // Print response
                System.out.println("Request " + i + " Response: " + response.getBody().asString());
            }

            // Close the workbook
            workbook.close();
            fis.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}