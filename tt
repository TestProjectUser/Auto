rIf the file from SharePoint is being opened in the browser instead of being downloaded to your local directory, it's likely because the file's content type triggers a preview mode (e.g., for PDFs, Excel files, etc.). To force the file to be saved locally, you need to ensure that the browser's download preferences are configured correctly. Here's how to address this:


---

Solution Steps

1. Modify Browser Preferences

Adjust Edge's download behavior to avoid opening files directly in the browser. Add preferences to EdgeOptions for specific file types.

prefs.put("plugins.always_open_pdf_externally", true); // For PDFs
prefs.put("profile.default_content_settings.popups", 0); // Prevent popups
prefs.put("download.open_pdf_in_system_reader", false); // For PDFs

2. Simulate "Save As" Option

If the file opens in a new tab or inline preview, Selenium cannot directly interact with the "Save As" dialog. Instead, intercept the file download link and save it programmatically.


---

Updated Code

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;

import java.io.File;
import java.util.HashMap;

public class SharePointDownloadFix {
    public static void main(String[] args) {
        // Set up WebDriverManager for Edge
        WebDriverManager.edgedriver().setup();

        // Set the local download directory
        String downloadFilePath = System.getProperty("user.dir") + File.separator + "downloads";

        // Configure Edge options for custom download directory
        EdgeOptions options = new EdgeOptions();
        HashMap<String, Object> prefs = new HashMap<>();
        prefs.put("download.default_directory", downloadFilePath); // Set download folder
        prefs.put("download.prompt_for_download", false); // Disable prompt
        prefs.put("download.directory_upgrade", true); // Automatically overwrite files
        prefs.put("safebrowsing.enabled", true); // Enable safe browsing
        prefs.put("plugins.always_open_pdf_externally", true); // For PDFs
        options.setExperimentalOption("prefs", prefs);

        // Initialize WebDriver
        WebDriver driver = new EdgeDriver(options);

        try {
            // Open SharePoint site
            driver.get("https://your-sharepoint-site-url");

            // Log in to SharePoint (if required)
            WebElement usernameField = driver.findElement(By.id("username")); // Replace with actual ID
            WebElement passwordField = driver.findElement(By.id("password")); // Replace with actual ID
            WebElement loginButton = driver.findElement(By.id("login")); // Replace with actual ID

            usernameField.sendKeys("your-username");
            passwordField.sendKeys("your-password");
            loginButton.click();

            // Navigate to the file location in SharePoint
            driver.get("https://your-sharepoint-site-url/path-to-file");

            // Locate and download the file
            WebElement fileDownloadLink = driver.findElement(By.xpath("//a[contains(@href, 'your-file-name')]")); // Update XPath
            String fileUrl = fileDownloadLink.getAttribute("href");

            // Simulate a direct download by fetching the file
            downloadFileDirectly(fileUrl, downloadFilePath + File.separator + "your-file-name.extension");

            // Verify the file exists in the local directory
            File downloadedFile = new File(downloadFilePath + File.separator + "your-file-name.extension");
            if (downloadedFile.exists()) {
                System.out.println("File downloaded successfully!");
            } else {
                System.out.println("File download failed!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }

    // Helper method to download the file directly
    private static void downloadFileDirectly(String fileUrl, String destinationPath) throws Exception {
        java.net.URL url = new java.net.URL(fileUrl);
        java.nio.file.Path targetPath = java.nio.file.Paths.get(destinationPath);
        try (java.io.InputStream in = url.openStream()) {
            java.nio.file.Files.copy(in, targetPath, java.nio.file.StandardCopyOption.REPLACE_EXISTING);
        }
    }
}


---

Key Changes

1. Browser Preferences:

plugins.always_open_pdf_externally: Forces PDFs to download instead of previewing in the browser.

Adjust preferences for other file types if necessary.



2. Direct File Download:

Extract the file URL using getAttribute("href").

Use Java's URL and Files.copy() to save the file directly to the specified directory.



3. Error Handling:

Ensure the file path and extension match the actual file to avoid FileNotFoundException.





---

Advantages

Works for files that would otherwise open in a new tab or inline.

Avoids browser preview issues and directly saves the file.


Test this solution and let me know if you encounter any further issues!

