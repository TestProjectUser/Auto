dimport org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;

import java.io.File;
import java.util.HashMap;

public class FileDownloadUsingJSExecutor {
    public static void main(String[] args) {
        // Set up WebDriverManager for Edge
        WebDriverManager.edgedriver().setup();

        // Set the local download directory
        String downloadFilePath = System.getProperty("user.dir") + File.separator + "downloads";

        // Configure Edge options for custom download directory
        EdgeOptions options = new EdgeOptions();
        HashMap<String, Object> prefs = new HashMap<>();
        prefs.put("download.default_directory", downloadFilePath);
        prefs.put("download.prompt_for_download", false);
        prefs.put("download.directory_upgrade", true);
        options.setExperimentalOption("prefs", prefs);

        // Initialize WebDriver
        WebDriver driver = new EdgeDriver(options);

        try {
            // Open SharePoint site
            driver.get("https://your-sharepoint-site-url");

            // Log in if required
            WebElement usernameField = driver.findElement(By.id("username")); // Replace with actual ID
            WebElement passwordField = driver.findElement(By.id("password")); // Replace with actual ID
            WebElement loginButton = driver.findElement(By.id("login")); // Replace with actual ID

            usernameField.sendKeys("your-username");
            passwordField.sendKeys("your-password");
            loginButton.click();

            // Navigate to the file's location in SharePoint
            driver.get("https://your-sharepoint-site-url/path-to-file");

            // Locate the file download link/button
            WebElement fileDownloadLink = driver.findElement(By.xpath("//a[contains(text(), 'your-file-name')]"));

            // Use JavaScript Executor to force a download
            JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;

            // Check if the link has an 'href' attribute
            String fileUrl = (String) jsExecutor.executeScript("return arguments[0].getAttribute('href');", fileDownloadLink);
            System.out.println("File URL: " + fileUrl);

            if (fileUrl == null || fileUrl.isEmpty()) {
                System.out.println("File URL is not available. Forcing a click on the element.");
                // Option 1: Trigger click via JavaScript
                jsExecutor.executeScript("arguments[0].click();", fileDownloadLink);

                // Wait for download completion (use explicit waits for production use)
                Thread.sleep(5000);
            } else {
                System.out.println("Downloading file using direct URL...");
                // Option 2: Open file URL in the browser to download directly
                jsExecutor.executeScript("window.open(arguments[0], '_blank');", fileUrl);

                // Wait for download completion
                Thread.sleep(5000);
            }

            // Verify if the file has been downloaded
            File downloadedFile = new File(downloadFilePath + File.separator + "your-file-name.extension");
            if (downloadedFile.exists()) {
                System.out.println("File downloaded successfully!");
            } else {
                System.out.println("File download failed.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}