import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.apache.poi.hssf.eventusermodel.*;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.hssf.record.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class LargeXLSReaderAndApiRequest {

    public static void main(String[] args) {
        String filePath = "./large_data.xls"; // Path to your .xls file

        try (FileInputStream fis = new FileInputStream(new File(filePath))) {
            POIFSFileSystem fs = new POIFSFileSystem(fis);
            HSSFRequest request = new HSSFRequest();
            request.addListenerForAllRecords(new CustomHSSFListener());

            // Start processing the .xls file
            HSSFUserModel userModel = new HSSFUserModel(fs.getRoot(), fs, new EventWorkbookBuilder.SheetRecordCollectingListener(request));
            userModel.process();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Custom listener to process each row of the .xls file
    static class CustomHSSFListener implements HSSFListener {
        private String colA, colB, colF, colH, colJ, colL, colN;

        @Override
        public void processRecord(Record record) {
            // Handle LabelSSTRecord which contains cell data
            if (record instanceof LabelSSTRecord) {
                LabelSSTRecord label = (LabelSSTRecord) record;
                // Capture the values of specific columns
                switch (label.getColumn()) {
                    case 0:
                        colA = label.getString();
                        break;
                    case 1:
                        colB = label.getString();
                        break;
                    case 5:
                        colF = label.getString();
                        break;
                    case 7:
                        colH = label.getString();
                        break;
                    case 9:
                        colJ = label.getString();
                        break;
                    case 11:
                        colL = label.getString();
                        break;
                    case 13:
                        colN = label.getString();
                        break;
                }
            }

            // After processing each row, send the API request
            if (record instanceof EndRowRecord) {
                sendApiRequest(colA, colB, colF, colH, colJ, colL, colN);
            }
        }

        // Method to send an API request with the XML data
        private void sendApiRequest(String colA, String colB, String colF, String colH, String colJ, String colL, String colN) {
            String xmlRequestBody = "<Request>\n" +
                    "    <ColumnA>" + colA + "</ColumnA>\n" +
                    "    <ColumnB>" + colB + "</ColumnB>\n" +
                    "    <ColumnF>" + colF + "</ColumnF>\n" +
                    "    <ColumnH>" + colH + "</ColumnH>\n" +
                    "    <ColumnJ>" + colJ + "</ColumnJ>\n" +
                    "    <ColumnL>" + colL + "</ColumnL>\n" +
                    "    <ColumnN>" + colN + "</ColumnN>\n" +
                    "</Request>";

            // Sending the request using Rest-Assured
            RestAssured.baseURI = "https://example.com/api"; // Replace with your API base URL
            Response response = RestAssured.given()
                    .header("Content-Type", "application/xml")
                    .header("Authorization", "Bearer your_token") // Replace with your token
                    .body(xmlRequestBody)
                    .post("/endpoint"); // Replace with your actual endpoint

            String responseBody = response.asString();
            System.out.println("Response for row: " + responseBody);

            // You can modify this part to write the response back into the Excel file if needed
        }
    }
}