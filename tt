To sort an ArrayList of dates (month and day) in Java, you can use the Collections.sort() method or Java's Streams API. Here's an example of how you can do it:

Example Code

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class SortArrayListByMonthAndDate {
    public static void main(String[] args) {
        // Create an ArrayList of LocalDate (Year is not important)
        ArrayList<LocalDate> dates = new ArrayList<>();
        
        // Add dates (year can be arbitrary, e.g., 2000 for consistency)
        dates.add(LocalDate.of(2000, 3, 15)); // March 15
        dates.add(LocalDate.of(2000, 1, 10)); // January 10
        dates.add(LocalDate.of(2000, 12, 25)); // December 25
        dates.add(LocalDate.of(2000, 6, 5));  // June 5
        
        // Sort the dates by month and day
        Collections.sort(dates, Comparator.comparingInt(date -> date.getMonthValue() * 100 + date.getDayOfMonth()));
        
        // Print sorted dates
        System.out.println("Sorted Dates:");
        for (LocalDate date : dates) {
            System.out.println(date.getMonth() + " " + date.getDayOfMonth());
        }
    }
}

Explanation:

1. Use LocalDate: This handles dates easily without the need for manual parsing.


2. Comparator: The key date.getMonthValue() * 100 + date.getDayOfMonth() ensures sorting by month first, then by day.


3. Collections.sort(): Sorts the list in place.



Output:

Sorted Dates:
JANUARY 10
MARCH 15
JUNE 5
DECEMBER 25

This ensures your dates are sorted correctly based on the month and day, ignoring the year.

