import io.restassured.RestAssured;
import io.restassured.specification.RequestSpecification;
import javax.net.ssl.SSLContext;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.security.cert.*;
import java.security.cert.Certificate;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;

public class RestAssuredWithSSL {
    public static void main(String[] args) throws Exception {
        String certPath = "path/to/cert.pem";
        String keyPath = "path/to/key.pem";
        String apiUrl = "http://asd/api/endpoint"; // Your API URL

        SSLContext sslContext = createSSLContext(certPath, keyPath);

        // Configure RestAssured with SSL
        RestAssured.useRelaxedHTTPSValidation(); // Ignore SSL issues (Optional)
        RestAssured.baseURI = apiUrl;
        
        RequestSpecification request = RestAssured.given()
            .relaxedHTTPSValidation()
            .header("Content-Type", "application/json")
            .body("{\"key\": \"value\"}") // Replace with actual JSON

            .config(RestAssured.config().sslConfig(
                new io.restassured.config.SSLConfig().sslSocketFactory(
                    new SSLSocketFactory(sslContext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)
                )
            ));

        // Perform POST request
        String response = request.post().then().extract().asString();
        System.out.println("Response: " + response);
    }

    private static SSLContext createSSLContext(String certPath, String keyPath) throws Exception {
        // Load Certificate
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        Certificate cert;
        try (InputStream certInput = Files.newInputStream(Paths.get(certPath))) {
            cert = cf.generateCertificate(certInput);
        }

        // Create KeyStore
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);
        keyStore.setCertificateEntry("cert", cert);

        // Create SSLContext
        return SSLContexts.custom()
                .loadTrustMaterial(keyStore, null)
                .build();
    }
}
