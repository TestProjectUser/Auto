import pandas as pd

# === File paths ===
source_file = "source.xlsx"          # Source is .xlsx
dest_file = "destination.xls"        # Destination is .xls
rules_file = "rules.txt"
output_file = "output.xlsx"

# === Load source Excel (xlsx) ===
src_df = pd.read_excel(source_file, sheet_name=0)

# === Load destination Excel (xls using xlrd) ===
dest_xls = pd.read_excel(dest_file, sheet_name=None, engine="xlrd")  # dict of sheets

# === Read validation rules from text file ===
with open(rules_file, "r") as f:
    lines = [line.strip() for line in f if line.strip()]

# === Store results ===
results = []

for rule in lines:
    try:
        sheet_col = rule.split(".")
        if len(sheet_col) != 2:
            continue  # Skip invalid line

        sheet, col = sheet_col[0].strip(), sheet_col[1].strip()

        if "sht1" in sheet:
            # Compare from source
            if col not in src_df.columns:
                continue
            src_values = src_df[col]
        elif "sht2" in sheet:
            # Get the actual destination sheet name
            dest_sheet_suffix = sheet.replace("sht2", "").strip()
            dest_sheet_name = f"Sheet{dest_sheet_suffix or '1'}"

            if dest_sheet_name not in dest_xls:
                print(f"Sheet '{dest_sheet_name}' not found in destination")
                continue

            dest_df = dest_xls[dest_sheet_name]

            if col not in dest_df.columns:
                print(f"Column '{col}' not found in destination sheet '{dest_sheet_name}'")
                continue

            # Compare row-by-row between source and destination
            for i in range(min(len(src_df), len(dest_df))):
                src_val = src_df.at[i, col] if col in src_df.columns else None
                dest_val = dest_df.at[i, col] if col in dest_df.columns else None
                status = "Pass" if str(src_val).strip() == str(dest_val).strip() else "Fail"

                results.append({
                    "Row": i + 2,
                    "Column": col,
                    "Source Value": src_val,
                    "Dest Value": dest_val,
                    "Status": status
                })

    except Exception as e:
        print(f"Error processing rule '{rule}': {e}")

# === Save output as .xlsx ===
output_df = pd.DataFrame(results)
output_df.to_excel(output_file, index=False)
print(f"Validation done. Output saved to {output_file}")