import io.restassured.RestAssured;
import io.restassured.config.SSLConfig;
import io.restassured.specification.RequestSpecification;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;

import javax.net.ssl.SSLContext;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManagerFactory;
import java.io.FileInputStream;
import java.io.FileReader;
import java.security.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class RestAssuredPEMExample {

    public static void main(String[] args) throws Exception {
        // Paths to your certificate and key PEM files
        String certFilePath = "/path/to/cert.pem";  
        String keyFilePath = "/path/to/key.pem";    

        // Register BouncyCastle as a security provider
        Security.addProvider(new BouncyCastleProvider());

        // Load PEM certificate and private key
        KeyStore keyStore = loadKeyStore(certFilePath, keyFilePath, "changeit");

        // Set up SSLContext
        SSLContext sslContext = createSSLContext(keyStore, "changeit");

        // Configure RestAssured with SSL
        RestAssured.useRelaxedHTTPSValidation();
        RequestSpecification requestSpec = RestAssured.given()
                .config(RestAssured.config().sslConfig(new SSLConfig().sslSocketFactory(sslContext.getSocketFactory())))
                .baseUri("https://your.api.url");

        // Send an API request
        String response = requestSpec
                .body("{ \"data\": \"value\" }")  // Replace with actual request body
                .when()
                .post("/api/endpoint")
                .then()
                .statusCode(200)
                .extract().asString();

        System.out.println("Response: " + response);
    }

    private static KeyStore loadKeyStore(String certFilePath, String keyFilePath, String password) throws Exception {
        // Load the X.509 Certificate
        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        FileInputStream certInputStream = new FileInputStream(certFilePath);
        X509Certificate cert = (X509Certificate) certFactory.generateCertificate(certInputStream);
        certInputStream.close();

        // Load the private key from PEM
        PrivateKey privateKey = loadPrivateKey(keyFilePath);

        // Initialize a KeyStore
        KeyStore keyStore = KeyStore.getInstance("PKCS12");
        keyStore.load(null, null);
        keyStore.setCertificateEntry("cert", cert);
        keyStore.setKeyEntry("private-key", privateKey, password.toCharArray(), new Certificate[]{cert});

        return keyStore;
    }

    private static PrivateKey loadPrivateKey(String keyFilePath) throws Exception {
        FileReader keyReader = new FileReader(keyFilePath);
        PEMParser pemParser = new PEMParser(keyReader);
        Object object = pemParser.readObject();
        pemParser.close();
        keyReader.close();

        // Convert PEM key to PrivateKey format
        return new JcaPEMKeyConverter().setProvider("BC").getPrivateKey((org.bouncycastle.openssl.PEMKeyPair) object);
    }

    private static SSLContext createSSLContext(KeyStore keyStore, String password) throws Exception {
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509");
        keyManagerFactory.init(keyStore, password.toCharArray());

        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("SunX509");
        trustManagerFactory.init((KeyStore) null);

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), new SecureRandom());
        return sslContext;
    }
}