import io.restassured.RestAssured;
import io.restassured.specification.RequestSpecification;
import io.restassured.config.SSLConfig;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.PEMReader;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.apache.http.impl.client.HttpClients;

import javax.net.ssl.SSLContext;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManagerFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.security.cert.CertificateFactory;
import java.io.FileInputStream;
import java.io.FileReader;
import java.security.cert.Certificate;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.KeyManagementException;

public class RestAssuredSSLExample {

    public static void main(String[] args) throws Exception {
        // Load PEM certificate and key
        String certFilePath = "/path/to/certificate.pem";
        String keyFilePath = "/path/to/private_key.pem";

        // Initialize the SSL context with PEM files
        SSLContext sslContext = createSSLContext(certFilePath, keyFilePath);

        // Set up RestAssured to use the SSL context
        RestAssured.useRelaxedHTTPSValidation();

        // Configure RestAssured to use the SSLContext
        RequestSpecification requestSpec = RestAssured.given()
                .config(RestAssured.config().sslConfig(new SSLConfig().sslSocketFactory(sslContext.getSocketFactory())))
                .baseUri("https://your.api.url");

        // Example POST request
        String response = requestSpec
                .body("{ \"data\": \"value\" }")  // Replace with actual request body
                .when()
                .post("/api/endpoint")
                .then()
                .statusCode(200)
                .extract().asString();

        System.out.println(response);
    }

    private static SSLContext createSSLContext(String certFilePath, String keyFilePath) throws Exception {
        // Load the PEM certificate
        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        FileInputStream certInputStream = new FileInputStream(certFilePath);
        X509Certificate cert = (X509Certificate) certFactory.generateCertificate(certInputStream);

        // Load the private key
        PEMParser pemParser = new PEMParser(new FileReader(keyFilePath));
        PrivateKey privateKey = (PrivateKey) pemParser.readObject();

        // Initialize KeyStore with the certificate and private key
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        keyStore.load(null, null);  // Initialize empty keystore
        keyStore.setCertificateEntry("cert", cert);
        keyStore.setKeyEntry("private-key", privateKey, "password".toCharArray());  // Provide the key password

        // Initialize KeyManagerFactory
        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        keyManagerFactory.init(keyStore, "password".toCharArray());

        // TrustManagerFactory (Use default trust store)
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init((KeyStore) null);

        // Initialize SSLContext with the KeyManager and TrustManager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

        return sslContext;
    }
}